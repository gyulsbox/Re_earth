generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int       @id @default(autoincrement())
  phone           String?   @unique
  email           String?   @unique
  name            String
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tokens          Token[]
  products        Product[]
  posts           Post[]
  comments        Comment[]
  empathy         Empathy[]
  writtenReviews  Review[]  @relation(name: "writtenReviews")
  receivedReviews Review[]  @relation(name: "receivedReviews")
  record          Record[]
  streams         Stream[]
  messages        Message[]
  chat            Chat[]
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  image         String
  name          String
  price         Int
  wishCount     Int       @default(0)
  commentsCount Int       @default(0)
  description   String    @db.MediumText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  record        Record[]
  chat          Chat[]
  messages      Message[]

  @@index([userId])
}

model Post {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  categories String    @default("chat")
  question   String    @db.MediumText
  latitude   Float?
  longitude  Float?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  empathy    Empathy[]

  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  comment   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Empathy {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  score        Int      @default(1)
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdById])
  @@index([createdForId])
}

model Record {
  kind      Kind
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  score     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

enum Kind {
  Purchase
  Sale
  Wish
}

model Stream {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream?  @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int?
  chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([streamId])
  @@index([productId])
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  messages  Message[]

  @@index([userId])
  @@index([productId])
}
